package com.hexaware.dao;

import com.hexaware.entity.Asset;
import util.DBConnection;
import myexceptions.AssetNotFoundException;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class AssetManagementServiceImpl implements AssetManagementService {

    private Connection connection;

    public AssetManagementServiceImpl() {
        connection = DBConnection.getConnection();
    }

    @Override
    public boolean addAsset(Asset asset) {
        String query = "INSERT INTO assets (name, type, value, acquisitionDate) VALUES (?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, asset.getName());
            preparedStatement.setString(2, asset.getType());
            preparedStatement.setDouble(3, asset.getValue());
            preparedStatement.setString(4, asset.getAcquisitionDate());

            int rowsInserted = preparedStatement.executeUpdate();
            return rowsInserted > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean updateAsset(Asset asset) {
        String query = "UPDATE assets SET name=?, type=?, value=?, acquisitionDate=? WHERE id=?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, asset.getName());
            preparedStatement.setString(2, asset.getType());
            preparedStatement.setDouble(3, asset.getValue());
            preparedStatement.setString(4, asset.getAcquisitionDate());
            preparedStatement.setInt(5, asset.getId());

            int rowsUpdated = preparedStatement.executeUpdate();
            return rowsUpdated > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean deleteAsset(int assetId) {
        String query = "DELETE FROM assets WHERE id=?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, assetId);

            int rowsDeleted = preparedStatement.executeUpdate();
            if (rowsDeleted > 0) {
                return true;
            } else {
                throw new AssetNotFoundException("Asset with ID " + assetId + " not found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean allocateAsset(int assetId, int employeeId, String allocationDate) {
        String query = "INSERT INTO asset_allocations (assetId, employeeId, allocationDate) VALUES (?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, assetId);
            preparedStatement.setInt(2, employeeId);
            preparedStatement.setString(3, allocationDate);

            int rowsInserted = preparedStatement.executeUpdate();
            return rowsInserted > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean deallocateAsset(int assetId, int employeeId, String returnDate) {
        String query = "UPDATE asset_allocations SET returnDate=? WHERE assetId=? AND employeeId=?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, returnDate);
            preparedStatement.setInt(2, assetId);
            preparedStatement.setInt(3, employeeId);

            int rowsUpdated = preparedStatement.executeUpdate();
            return rowsUpdated > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean performMaintenance(int assetId, String maintenanceDate, String description, double cost) {
        String query = "INSERT INTO asset_maintenance (assetId, maintenanceDate, description, cost) VALUES (?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, assetId);
            preparedStatement.setString(2, maintenanceDate);
            preparedStatement.setString(3, description);
            preparedStatement.setDouble(4, cost);

            int rowsInserted = preparedStatement.executeUpdate();
            return rowsInserted > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean reserveAsset(int assetId, int employeeId, String reservationDate, String startDate, String endDate) {
        String query = "INSERT INTO asset_reservations (assetId, employeeId, reservationDate, startDate, endDate) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, assetId);
            preparedStatement.setInt(2, employeeId);
            preparedStatement.setString(3, reservationDate);
            preparedStatement.setString(4, startDate);
            preparedStatement.setString(5, endDate);

            int rowsInserted = preparedStatement.executeUpdate();
            return rowsInserted > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean withdrawReservation(int reservationId) {
        String query = "DELETE FROM asset_reservations WHERE id=?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, reservationId);

            int rowsDeleted = preparedStatement.executeUpdate();
            return rowsDeleted > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}

